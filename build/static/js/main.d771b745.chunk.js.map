{"version":3,"sources":["components/form/form.scss","components/form/components/wrapper/wrapper.scss","components/list/list.scss","components/page-wrapper/page-wrapper.scss","components/header-menu/header-menu.scss","components/login-form/login-form.scss","components/page-loader/page-loader.scss","core/data-provider.ts","components/list/list.tsx","core/config.ts","components/page-wrapper/page-wrapper.tsx","utils/string.ts","components/form/components/wrapper/wrapper.tsx","components/form/components/input/input.tsx","components/form/components/datepicker/datepicker.tsx","components/form/form.tsx","components/form/components/switch/switch.tsx","app-context.ts","components/header-menu/header-menu.tsx","router.tsx","components/login-form/login-form.tsx","components/page-loader/page-loader.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","HOST","fetch","promise","key","a","data","graphQLClient","request","TOKEN","setToken","token","GraphQLClient","headers","authorization","MOCK_PROVIDER","users","list","console","log","detail","id","userId","edit","payload","updateUserInput","create","adminCreateUserInput","logs","adminPleaseSystemAuth","login","name","psw","email","password","List","dataDefinition","dataProviderKey","actions","history","useHistory","useState","isLoading","setLoading","setData","hasCreateAction","includes","fetchData","fetchedData","useEffect","getColumns","useCallback","Object","keys","filter","definitionItemKey","map","index","title","dataIndex","render","className","css","actionHeader","loading","icon","DownloadOutlined","onClick","to","PlusOutlined","dataSource","columns","onRow","record","push","config","pathname","pages","sessionsCount","type","component","editable","required","firstName","createdAt","v","moment","format","isAdmin","user","action","PageWrapper","children","pageWrapper","capitalize","s","charAt","toUpperCase","slice","Wrapper","header","requiredStar","Input","placeholder","value","disabled","onChange","event","target","Datepicker","showTime","undefined","m","date","COMPONENTS_MAP","DatePicker","checked","Form","isSaving","setSaving","localData","setLocalData","isCreateAction","handleSaveClicked","redirect","notification","success","message","formLoadingWrappper","isSaveDisabled","length","gutter","TargetComponent","span","nextLocalData","next","cond","onValueChange","error","description","showIcon","buttonArea","LoadingOutlined","spin","AppContext","React","createContext","HeaderMenu","useContext","location","pathName","setPathName","listen","mode","theme","selectedKeys","menu","menuItem","Item","logout","window","localStorage","removeItem","Router","pageKeys","pageKey","path","match","params","LoginForm","setName","setPsw","handleButtonClicked","loginResponse","loginBtnDisabled","loginForm","e","PageLoader","pageLoader","App","AppWithContext","isInit","setInit","getItem","setApiToken","Provider","setItem","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d771b745.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLoadingWrappper\":\"formLoadingWrappper___3usrP\",\"buttonArea\":\"buttonArea___RLdpg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header___3lOkm\",\"requiredStar\":\"requiredStar___cER25\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"actionHeader\":\"actionHeader___1Qm6Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"pageWrapper___392-U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logout\":\"logout___3Us4T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"loginForm___2AqeY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageLoader\":\"pageLoader___2KOqt\"};","import { GraphQLClient, request } from 'graphql-request'\r\n\r\nconst query = `\r\n\tquery adminListAllUsers {\r\n\t\tadminListAllUsers {\r\n\t\t\tid\r\n\t\t\tfirstName\r\n\t\t\tlastName\r\n\t\t\temail\r\n\t\t\tcreatedAt\r\n\t\t\tpassword\r\n\t\t\tisAdmin\r\n\t\t\tsessionsCount\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst query2 = `\r\n\tquery adminListUser ($userId: ID!) {\r\n\t\tadminListUser (userId: $userId) {\r\n\t\t\tid\r\n\t\t\tfirstName\r\n\t\t\tlastName\r\n\t\t\temail\r\n\t\t\tcreatedAt\r\n\t\t\tpassword\r\n\t\t\tisAdmin\r\n\t\t\tsessionsCount\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst query3 = `\r\n\tmutation adminUpdateUser ($userId: ID!, $updateUserInput: UpdateUserInput!) {\r\n\t\tadminUpdateUser (userId: $userId, updateUserInput: $updateUserInput)\r\n\t}\r\n`\r\n\r\nconst query4 = `\r\n\tmutation adminCreateUser ($adminCreateUserInput: AdminCreateUserInput!) {\r\n\t\tadminCreateUser (adminCreateUserInput: $adminCreateUserInput)\r\n\t}\r\n`\r\n\r\nconst logsListQuery = `\r\n\tquery adminListAllLogs {\r\n\t\tadminListAllLogs {\r\n\t\t\tid\r\n\t\t\tuser\r\n\t\t\taction\r\n\t\t\tcreatedAt\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst logListQuery = `\r\n\tquery adminListLog ($id: ID!) {\r\n\t\tadminListLog (id: $id) {\r\n\t\t\tid\r\n\t\t\tuser\r\n\t\t\taction\r\n\t\t\tcreatedAt\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst loginQuery = `\r\n\tmutation adminLoginUser ($email: String!, $password: String!) {\r\n\t\tadminLoginUser (email: $email, password: $password) {\r\n\t\t\ttoken\r\n\t\t}\r\n\t}\r\n`\r\n\r\n// const HOST = 'http://localhost/graphql'\r\nconst HOST = 'https://api.preze.live/graphql'\r\n\r\nconst fetch = async (promise: any, key: string) => {\r\n\tconst data = await promise\r\n\treturn data[key]\r\n}\r\n\r\nlet graphQLClient: any = { request: () => { } }\r\nlet TOKEN = ''\r\nexport const setToken = (token: string) => {\r\n\tTOKEN = `Bearer ${token}`\r\n\r\n\tgraphQLClient = new GraphQLClient(HOST, {\r\n\t\theaders: {\r\n\t\t\tauthorization: TOKEN,\r\n\t\t},\r\n\t})\r\n}\r\n\r\nexport const MOCK_PROVIDER = {\r\n\tusers: {\r\n\t\tlist: () => {\r\n\t\t\tconsole.log({ TOKEN })\r\n\t\t\treturn fetch(graphQLClient.request(query), 'adminListAllUsers')\r\n\t\t},\r\n\t\tdetail: (id: string) => fetch(graphQLClient.request(query2, { userId: id }), 'adminListUser'),\r\n\t\tedit: (id: string, payload: any) => fetch(graphQLClient.request(query3, { userId: id, updateUserInput: payload }), 'adminUpdateUser'),\r\n\t\tcreate: (payload: any) => fetch(graphQLClient.request(query4, { adminCreateUserInput: payload }), 'adminUpdateUser'),\r\n\t},\r\n\tlogs: {\r\n\t\tlist: () => fetch(graphQLClient.request(logsListQuery), 'adminListAllLogs'),\r\n\t\tdetail: (id: string) => fetch(graphQLClient.request(logListQuery, { id }), 'adminListLog'),\r\n\t},\r\n\tadminPleaseSystemAuth: {\r\n\t\tlogin: (name: string, psw: string) => fetch(request(HOST, loginQuery, { email: name, password: psw }), 'adminLoginUser'),\r\n\t}\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport { MOCK_PROVIDER } from 'core/data-provider'\r\nimport { Table, Button } from 'antd'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport { DownloadOutlined } from '@ant-design/icons'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport css from './list.scss'\r\n\r\ninterface IProps {\r\n\tdataProviderKey: string;\r\n\tdataDefinition: DataDefinition;\r\n\tactions: string[];\r\n}\r\n\r\nconst List = ({ dataDefinition, dataProviderKey, actions, }: IProps) => {\r\n\tconst history = useHistory()\r\n\tconst [isLoading, setLoading] = useState(true)\r\n\tconst [data, setData] = useState([])\r\n\r\n\tconst hasCreateAction = actions.includes('create')\r\n\r\n\tconst fetchData = async () => {\r\n\t\tsetLoading(true)\r\n\t\tconst fetchedData = await MOCK_PROVIDER[dataProviderKey].list()\r\n\t\tsetData(fetchedData)\r\n\t\tsetLoading(false)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchData()\r\n\t}, [])\r\n\r\n\tconst getColumns = useCallback(() => {\r\n\t\treturn Object.keys(dataDefinition)\r\n\t\t\t.filter((definitionItemKey: string) => dataDefinition[definitionItemKey].list) // is in list ?\r\n\t\t\t.map((definitionItemKey: string, index: number) => (\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: definitionItemKey,\r\n\t\t\t\t\tdataIndex: definitionItemKey,\r\n\t\t\t\t\tkey: `${definitionItemKey}-${index}`,\r\n\t\t\t\t\trender: dataDefinition[definitionItemKey].render\r\n\t\t\t\t}\r\n\t\t\t))\r\n\t}, [dataDefinition])\r\n\r\n\tconst handleRowClicked = (id: string) => history.push(`/${dataProviderKey}/detail/${id}`)\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<div className={css.actionHeader}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tloading={isLoading}\r\n\t\t\t\t\t\ticon={<DownloadOutlined />}\r\n\t\t\t\t\t\tonClick={fetchData}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t{hasCreateAction && (\r\n\t\t\t\t\t<Link to={`/${dataProviderKey}/detail/`}>\r\n\t\t\t\t\t\t<Button icon={<PlusOutlined />}>\r\n\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\r\n\r\n\t\t\t<Table\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\tdataSource={data}\r\n\t\t\t\tcolumns={getColumns()}\r\n\t\t\t\tonRow={(record: { id: string }) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tonClick: () => handleRowClicked(record.id),\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default List\r\n","import moment from 'moment'\r\n\r\nconst config = {\r\n\t'menu': [\r\n\t\t{\r\n\t\t\ttitle: 'Dashboard',\r\n\t\t\tpathname: '/'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Users',\r\n\t\t\tpathname: '/users'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Logs',\r\n\t\t\tpathname: '/logs'\r\n\t\t}\r\n\t],\r\n\tpages: {\r\n\t\tusers: {\r\n\t\t\tdataProviderKey: 'users',\r\n\t\t\tactions: [\r\n\t\t\t\t'create'\r\n\t\t\t],\r\n\t\t\tdataDefinition: {\r\n\t\t\t\tsessionsCount: {\r\n\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: false,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tid: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: false,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tpassword: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t},\r\n\t\t\t\temail: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tfirstName: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tcreatedAt: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'datepicker',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\trender: (v?: string) => v ? moment(v).format('HH:MM DD/MM/YYYY') : v,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tisAdmin: {\r\n\t\t\t\t\ttype: 'boolean',\r\n\t\t\t\t\tcomponent: 'switch',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t},\r\n\t\tlogs: {\r\n\t\t\tdataProviderKey: 'logs',\r\n\t\t\tdataDefinition: {\r\n\t\t\t\tid: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: false,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tuser: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\trequired: true,\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\taction: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'input',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t},\r\n\t\t\t\tcreatedAt: {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tcomponent: 'datepicker',\r\n\t\t\t\t\teditable: true,\r\n\t\t\t\t\trender: (v?: string) => v ? moment(v).format('HH:MM DD/MM/YYYY') : v,\r\n\t\t\t\t\tlist: true,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default config\r\n","import React from 'react'\r\nimport { Card } from 'antd'\r\nimport css from './page-wrapper.scss'\r\n\r\ninterface IProps {\r\n\ttitle?: string;\r\n\tchildren: React.ReactElement;\r\n}\r\n\r\nconst PageWrapper = ({ title, children }: IProps) => {\r\n\treturn (\r\n\t\t<Card title={title} className={css.pageWrapper}>\r\n\t\t\t{children}\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default PageWrapper\r\n","export const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1)\r\n","import React from 'react'\r\nimport css from './wrapper.scss'\r\n\r\ninterface IIProps {\r\n\tname: string;\r\n\trequired?: boolean;\r\n\tchildren: React.ReactElement;\r\n}\r\n\r\nconst Wrapper = ({ required, name, children }: IIProps) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<header className={css.header}>\r\n\t\t\t\t<h3>\r\n\t\t\t\t\t{name}\r\n\t\t\t\t</h3>\r\n\t\t\t\t{required && (\r\n\t\t\t\t\t<span className={css.requiredStar}>\r\n\t\t\t\t\t\t*\r\n\t\t\t\t\t</span>\r\n\t\t\t\t)}\r\n\t\t\t</header>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Wrapper\r\n","import React from 'react'\r\nimport { Input as AntdInput } from 'antd'\r\n\r\ninterface IProps {\r\n\tplaceholder: string;\r\n\tvalue: string;\r\n\tdisabled: boolean;\r\n\tonChange: (nextValue: string) => void;\r\n}\r\n\r\nconst Input = ({ placeholder, value, disabled, onChange }: IProps) => {\r\n\treturn (\r\n\t\t<AntdInput\r\n\t\t\tplaceholder={placeholder}\r\n\t\t\tvalue={value}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tonChange={(event: React.ChangeEvent<HTMLInputElement>) => onChange(event.target.value)}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport { DatePicker as DatePickerAntd } from 'antd'\r\nimport moment from 'moment'\r\n\r\n// TODO type\r\ninterface IProps {\r\n\tvalue?: string;\r\n\tdisabled: boolean;\r\n\tonChange: (nextValue: any) => void;\r\n}\r\n\r\nconst Datepicker = ({ value, disabled, onChange }: IProps) => {\r\n\treturn (\r\n\t\t<DatePickerAntd\r\n\t\t\tshowTime\r\n\t\t\tvalue={value ? moment(value) : undefined}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tonChange={(m: any, date: any) => onChange(date)}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Datepicker\r\n","import React, { useEffect, useState } from 'react'\r\nimport { MOCK_PROVIDER } from 'core/data-provider'\r\nimport { Spin, Button, Divider, Row, Col, notification, Alert } from 'antd'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\nimport css from './form.scss'\r\nimport Wrapper from './components/wrapper'\r\n\r\nimport Input from './components/input'\r\nimport DatePicker from './components/datepicker'\r\nimport Switch from './components/switch'\r\n\r\nconst COMPONENTS_MAP = {\r\n\t'input': Input,\r\n\t'datepicker': DatePicker,\r\n\t'switch': Switch,\r\n}\r\n\r\ninterface IProps {\r\n\tid?: string;\r\n\tdataProviderKey: string;\r\n\tdataDefinition: DataDefinition;\r\n}\r\n\r\nconst Form = ({ id, dataProviderKey, dataDefinition }: IProps) => {\r\n\tconst history = useHistory()\r\n\tconst [isSaving, setSaving] = useState(false)\r\n\tconst [isLoading, setLoading] = useState(true)\r\n\tconst [data, setData] = useState({})\r\n\tconst [localData, setLocalData] = useState({})\r\n\r\n\tconst isCreateAction = !id\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst fetchedData = await MOCK_PROVIDER[dataProviderKey].detail(id)\r\n\t\t\tsetData(fetchedData)\r\n\t\t\tsetLoading(false)\r\n\t\t}\r\n\t\tif (isCreateAction) {\r\n\t\t\tsetLoading(false)\r\n\t\t\treturn\r\n\t\t}\r\n\t\tfetchData()\r\n\t}, [])\r\n\r\n\tconst handleSaveClicked = async (redirect?: boolean) => {\r\n\t\tsetSaving(true)\r\n\r\n\t\tif (isCreateAction) {\r\n\t\t\tawait MOCK_PROVIDER[dataProviderKey].create(localData)\r\n\t\t} {\r\n\t\t\tawait MOCK_PROVIDER[dataProviderKey].edit(id, localData)\r\n\t\t}\r\n\r\n\t\tsetData({ ...data, ...localData })\r\n\t\tsetLocalData({})\r\n\r\n\t\tsetSaving(false)\r\n\r\n\t\tnotification.success({\r\n\t\t\tmessage: `${dataProviderKey} has been ${isCreateAction ? 'created' : 'saved'} successfully`,\r\n\t\t})\r\n\r\n\t\tif (redirect) history.push(`/${dataProviderKey}`)\r\n\t}\r\n\r\n\tconst onValueChange = (key: string, value: any) => {\r\n\t\tconst nextLocalData = {\r\n\t\t\t...localData,\r\n\t\t\t[key]: value\r\n\t\t}\r\n\r\n\t\tconsole.log({\r\n\t\t\tnext: nextLocalData[key],\r\n\t\t\tdata: data[key],\r\n\t\t\tcond: nextLocalData[key] === data[key]\r\n\t\t})\r\n\r\n\t\tif (nextLocalData[key] === data[key]) {\r\n\t\t\t// value is same\r\n\t\t\tdelete nextLocalData[key]\r\n\t\t}\r\n\r\n\t\tsetLocalData(nextLocalData)\r\n\t}\r\n\r\n\tif (isLoading) {\r\n\t\treturn (\r\n\t\t\t<section className={css.formLoadingWrappper}>\r\n\t\t\t\t<Spin />\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n\r\n\tconst isSaveDisabled = Object.keys(localData).length === 0\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button>\r\n\t\t\t\t<Link to={`/${dataProviderKey}`}>\r\n\t\t\t\t\tBack\r\n\t\t\t\t</Link>\r\n\t\t\t</Button>\r\n\t\t\t<Divider />\r\n\t\t\t<Row gutter={16}>\r\n\t\t\t\t{\r\n\t\t\t\t\tObject.keys(dataDefinition).map((key: string) => {\r\n\t\t\t\t\t\tconst TargetComponent = COMPONENTS_MAP[dataDefinition[key].component]\r\n\r\n\t\t\t\t\t\tif (!TargetComponent) {\r\n\t\t\t\t\t\t\tconsole.error(`Missing component ${dataDefinition[key].component}`)\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Alert\r\n\t\t\t\t\t\t\t\t\tmessage='Error'\r\n\t\t\t\t\t\t\t\t\tdescription=\"This component doesn't exist\"\r\n\t\t\t\t\t\t\t\t\ttype='error'\r\n\t\t\t\t\t\t\t\t\tshowIcon\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Col span={6} key={key}>\r\n\t\t\t\t\t\t\t\t<Wrapper name={key} required={dataDefinition[key].required}>\r\n\t\t\t\t\t\t\t\t\t<TargetComponent\r\n\t\t\t\t\t\t\t\t\t\tplaceholder={key}\r\n\t\t\t\t\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\t\t\t\t\tdataDefinition[key].type !== 'boolean'\r\n\t\t\t\t\t\t\t\t\t\t\t\t? localData[key] || data[key] || ''\r\n\t\t\t\t\t\t\t\t\t\t\t\t: typeof localData[key] === 'boolean' ? localData[key] : data[key]\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tdisabled={!dataDefinition[key].editable}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(value: any) => onValueChange(key, value)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Wrapper>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</Row>\r\n\t\t\t<Divider />\r\n\t\t\t<div className={css.buttonArea}>\r\n\t\t\t\t{\r\n\t\t\t\t\t!isSaving\r\n\t\t\t\t\t\t? (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<Button>\r\n\t\t\t\t\t\t\t\t\t<Link to={`/${dataProviderKey}`}>\r\n\t\t\t\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\ttype='primary'\r\n\t\t\t\t\t\t\t\t\tdisabled={isSaveDisabled}\r\n\t\t\t\t\t\t\t\t\tonClick={() => handleSaveClicked(true)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{isCreateAction ? 'Create' : 'Save'} and close\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\ttype='primary'\r\n\t\t\t\t\t\t\t\t\tdisabled={isSaveDisabled}\r\n\t\t\t\t\t\t\t\t\tonClick={() => handleSaveClicked()}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{isCreateAction ? 'Create' : 'Save'}\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t: <LoadingOutlined spin />\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\t\t</ >\r\n\t)\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport { Switch as AntdSwitch } from 'antd'\r\n\r\ninterface IProps {\r\n\tvalue: boolean;\r\n\tdisabled: boolean;\r\n\tonChange: (nextValue: boolean) => void;\r\n}\r\n\r\nconst Switch = ({ disabled, value, onChange }: IProps) => {\r\n\treturn (\r\n\t\t<AntdSwitch disabled={disabled} checked={value} onChange={(onChange)} />\r\n\t)\r\n}\r\n\r\nexport default Switch\r\n","import React from 'react'\r\n\r\nconst AppContext = React.createContext<any>({\r\n\ttoken: null,\r\n})\r\n\r\nexport default AppContext\r\n","import React, { useState, useContext } from 'react'\r\nimport { Menu } from 'antd'\r\nimport config from 'core/config'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport css from './header-menu.scss'\r\nimport AppContext from 'app-context'\r\n\r\nconst HeaderMenu = () => {\r\n\tconst history = useHistory()\r\n\tconst { setToken } = useContext(AppContext)\r\n\tconst [pathName, setPathName] = useState(history.location.pathname)\r\n\r\n\thistory.listen((location) => {\r\n\t\tsetPathName(location.pathname)\r\n\t})\r\n\r\n\tconst handleLogoutClicked = () => {\r\n\t\tsetToken(null)\r\n\t\twindow.localStorage.removeItem('admin.please.token')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Menu mode='horizontal' theme='dark' selectedKeys={[pathName]}>\r\n\t\t\t{\r\n\t\t\t\tconfig.menu.map((menuItem: ConfigMenuItem) => (\r\n\t\t\t\t\t<Menu.Item key={menuItem.pathname}>\r\n\t\t\t\t\t\t<Link to={menuItem.pathname}>\r\n\t\t\t\t\t\t\t{menuItem.title}\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t\t<Menu.Item className={css.logout} onClick={handleLogoutClicked}>\r\n\t\t\t\tLogout\r\n\t\t\t</Menu.Item>\r\n\t\t</Menu>\r\n\t)\r\n}\r\n\r\nexport default HeaderMenu\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport List from 'components/list'\r\nimport config from './core/config'\r\nimport PageWrapper from 'components/page-wrapper'\r\nimport { capitalize } from 'utils/string'\r\nimport { Alert } from 'antd'\r\nimport Form from 'components/form'\r\nimport HeaderMenu from 'components/header-menu'\r\n\r\nconst Router = () => {\r\n\tconst pageKeys = Object.keys(config.pages)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<HeaderMenu />\r\n\t\t\t<Switch>\r\n\t\t\t\t{\r\n\t\t\t\t\tpageKeys.map((pageKey: string) => (\r\n\t\t\t\t\t\t<Route\r\n\t\t\t\t\t\t\tkey={pageKey}\r\n\t\t\t\t\t\t\tpath={`/${pageKey}/detail/:id?`}\r\n\t\t\t\t\t\t\tcomponent={({ match: { params: { id } } }: any) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<PageWrapper title={capitalize(pageKey)}>\r\n\t\t\t\t\t\t\t\t\t\t<Form\r\n\t\t\t\t\t\t\t\t\t\t\tdataProviderKey={config.pages[pageKey].dataProviderKey}\r\n\t\t\t\t\t\t\t\t\t\t\tdataDefinition={config.pages[pageKey].dataDefinition}\r\n\t\t\t\t\t\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</PageWrapper>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\tpageKeys.map((pageKey: string) => (\r\n\t\t\t\t\t\t<Route\r\n\t\t\t\t\t\t\tkey={pageKey}\r\n\t\t\t\t\t\t\tpath={`/${pageKey}`}\r\n\t\t\t\t\t\t\tcomponent={() => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<PageWrapper title={capitalize(pageKey)}>\r\n\t\t\t\t\t\t\t\t\t\t<List\r\n\t\t\t\t\t\t\t\t\t\t\tdataProviderKey={config.pages[pageKey].dataProviderKey}\r\n\t\t\t\t\t\t\t\t\t\t\tdataDefinition={config.pages[pageKey].dataDefinition}\r\n\t\t\t\t\t\t\t\t\t\t\tactions={config.pages[pageKey].actions || []}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</PageWrapper>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t<Route render={() => (\r\n\t\t\t\t\t<PageWrapper>\r\n\t\t\t\t\t\t<Alert\r\n\t\t\t\t\t\t\tmessage='Error'\r\n\t\t\t\t\t\t\tdescription=\"This component doesn't exist\"\r\n\t\t\t\t\t\t\ttype='error'\r\n\t\t\t\t\t\t\tshowIcon\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</PageWrapper>\r\n\t\t\t\t)} />\r\n\t\t\t</Switch>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Router\r\n","import React, { useState, useContext } from 'react'\r\nimport css from './login-form.scss'\r\nimport { Input, Button, Card, notification } from 'antd'\r\nimport { MOCK_PROVIDER } from 'core/data-provider'\r\nimport AppContext from 'app-context'\r\n\r\nconst LoginForm = () => {\r\n\tconst { setToken } = useContext(AppContext)\r\n\tconst [isLoading, setLoading] = useState(false)\r\n\tconst [name, setName] = useState('')\r\n\tconst [psw, setPsw] = useState('')\r\n\r\n\tconst handleButtonClicked = async () => {\r\n\t\tsetLoading(true)\r\n\t\ttry {\r\n\t\t\tconst loginResponse = await MOCK_PROVIDER.adminPleaseSystemAuth.login(name, psw)\r\n\t\t\tsetToken(loginResponse.token)\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e)\r\n\t\t\tnotification.error({\r\n\t\t\t\tmessage: 'Login failed',\r\n\t\t\t})\r\n\t\t}\r\n\t\tsetLoading(false)\r\n\t}\r\n\r\n\tconst loginBtnDisabled = name.length === 0 || psw.length === 0\r\n\r\n\treturn (\r\n\t\t<Card className={css.loginForm}>\r\n\t\t\t<h3>\r\n\t\t\t\tName\r\n\t\t\t</h3>\r\n\t\t\t<Input\r\n\t\t\t\tvalue={name}\r\n\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\r\n\t\t\t/>\r\n\r\n\t\t\t<h3>\r\n\t\t\t\tPassword\r\n\t\t\t</h3>\r\n\t\t\t<Input\r\n\t\t\t\ttype='password'\r\n\t\t\t\tvalue={psw}\r\n\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) => setPsw(e.target.value)}\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\tloading={isLoading}\r\n\t\t\t\ttype='primary'\r\n\t\t\t\tonClick={handleButtonClicked}\r\n\t\t\t\tdisabled={loginBtnDisabled}\r\n\t\t\t>\r\n\t\t\t\tLogin\r\n\t\t\t</Button>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default LoginForm\r\n","import React from 'react'\r\nimport css from './page-loader.scss'\r\nimport { Spin } from 'antd'\r\n\r\nconst PageLoader = () => {\r\n\treturn (\r\n\t\t<section className={css.pageLoader}>\r\n\t\t\t<Spin />\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useState, useEffect } from 'react'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport AppRouter from './router'\r\nimport LoginForm from 'components/login-form'\r\nimport AppContext from 'app-context'\r\nimport PageLoader from 'components/page-loader'\r\nimport { setToken as setApiToken } from 'core/data-provider'\r\n\r\nconst AppWithContext = () => {\r\n\tconst [isInit, setInit] = useState<boolean>()\r\n\tconst [token, setToken] = useState<string>()\r\n\r\n\tuseEffect(() => {\r\n\t\tconst token = window.localStorage.getItem('admin.please.token')\r\n\t\tif (token) {\r\n\t\t\tsetApiToken(token)\r\n\t\t\tsetToken(token)\r\n\t\t}\r\n\t\tsetInit(true)\r\n\t}, [])\r\n\r\n\tconst handleTokenChanged = (token: string) => {\r\n\t\tsetApiToken(token)\r\n\t\tsetToken(token)\r\n\t\twindow.localStorage.setItem('admin.please.token', token)\r\n\t}\r\n\r\n\tif (!isInit) return <PageLoader />\r\n\r\n\treturn (\r\n\t\t<AppContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\ttoken,\r\n\t\t\t\tsetToken: handleTokenChanged,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<App token={token} />\r\n\t\t</AppContext.Provider>\r\n\t)\r\n}\r\n\r\nconst App = ({ token }: { token?: string }) => {\r\n\tif (!token) {\r\n\t\treturn <LoginForm />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<AppRouter />\r\n\t\t</Router>\r\n\t)\r\n}\r\n\r\nexport default AppWithContext\r\n","/* eslint no-use-before-define: 0 */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n)\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t)\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister()\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message)\n\t\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\nimport 'assets/global.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}